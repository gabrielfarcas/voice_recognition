# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from scipy.fftpack import fft
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
from pyqtgraph import PlotWidget
import pyaudio
import numpy as np
import sys, os
import threading
import atexit
import wave
import struct
import pickle
from scipy.io.wavfile import read
from sklearn.mixture import GaussianMixture
from sklearn import preprocessing
import python_speech_features as mfcc
from scipy.fftpack import fft

class Ui_AddUser(object):
    def setupUi(self, AddUser):
        AddUser.setObjectName("AddUser")
        AddUser.resize(400, 250)
        AddUser.setMinimumSize(QtCore.QSize(400, 250))
        AddUser.setMaximumSize(QtCore.QSize(400, 250))
        AddUser.setStyleSheet("QWidget{\n"
"    background-color:   rgb(0, 0, 0);\n"
"}")
        self.verticalLayout = QtWidgets.QVBoxLayout(AddUser)
        self.verticalLayout.setObjectName("verticalLayout")
        self.top = QtWidgets.QFrame(AddUser)
        self.top.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"    padding: 0px;\n"
"}")
        self.top.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top.setObjectName("top")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.top)
        self.verticalLayout_2.setContentsMargins(8, 5, 8, 5)
        self.verticalLayout_2.setSpacing(5)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.name = QtWidgets.QFrame(self.top)
        self.name.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"    border:0px;\n"
"}")
        self.name.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.name.setFrameShadow(QtWidgets.QFrame.Raised)
        self.name.setObjectName("name")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.name)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.name)
        self.label.setStyleSheet("QLabel{\n"
"color: rgb(28,191,255);\n"
"}")
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.line_name = QtWidgets.QLineEdit(self.name)
        self.line_name.setMinimumSize(QtCore.QSize(310, 20))
        self.line_name.setMaximumSize(QtCore.QSize(310, 20))
        self.line_name.setStyleSheet("QLineEdit:hover {\n"
"    border:  1px ridge rgb(85, 170, 0);\n"
"}\n"
"QLineEdit {\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.line_name.setMaxLength(32)
        self.line_name.setClearButtonEnabled(True)
        self.line_name.setObjectName("line_name")
        self.horizontalLayout.addWidget(self.line_name)
        self.verticalLayout_2.addWidget(self.name)
        self.frame = QtWidgets.QFrame(self.top)
        self.frame.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"    border:0px;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setStyleSheet("QLabel{\n"
"color: rgb(28,191,255);\n"
"}")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.line_id = QtWidgets.QLineEdit(self.frame)
        self.line_id.setEnabled(True)
        self.line_id.setMinimumSize(QtCore.QSize(280, 20))
        self.line_id.setMaximumSize(QtCore.QSize(280, 20))
        self.line_id.setAutoFillBackground(False)
        self.line_id.setStyleSheet("QLineEdit:hover {\n"
"    border:  1px ridge rgb(85, 170, 0);\n"
"}\n"
"QLineEdit {\n"
"   color: rgb(255, 255, 255);\n"
"}")
        self.line_id.setInputMethodHints(QtCore.Qt.ImhDigitsOnly|QtCore.Qt.ImhPreferNumbers)
        self.line_id.setText("")
        self.line_id.setMaxLength(10)
        self.line_id.setClearButtonEnabled(True)
        self.line_id.setObjectName("line_id")
        self.horizontalLayout_2.addWidget(self.line_id)
        self.verticalLayout_2.addWidget(self.frame)
        self.verticalLayout.addWidget(self.top)
        self.frame_2 = QtWidgets.QFrame(AddUser)
        self.frame_2.setMinimumSize(QtCore.QSize(0, 80))
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 80))
        self.frame_2.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"}")
        self.frame_2.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lcdNumber = QtWidgets.QLCDNumber(self.frame_2)
        self.lcdNumber.setStyleSheet("background-color:rgb(0, 0, 0) ;\n"
"color: rgb(0, 255, 0);")
        self.lcdNumber.setSmallDecimalPoint(False)
        self.lcdNumber.setDigitCount(2)
        self.lcdNumber.setMode(QtWidgets.QLCDNumber.Dec)
        self.lcdNumber.setObjectName("lcdNumber")
        self.horizontalLayout_6.addWidget(self.lcdNumber)
        self.ecran_voice = PlotWidget(self.frame_2)
        self.ecran_voice.hideAxis('bottom')
        self.ecran_voice.hideAxis('left')
        self.ecran_voice.enableAutoRange()
        self.ecran_voice.setMinimumSize(QtCore.QSize(280, 0))
        self.ecran_voice.setMaximumSize(QtCore.QSize(0, 80))
        self.ecran_voice.setStyleSheet("QWidget{\n"
"background-color: rgb(0, 0, 0);\n"
"color: rgb(0, 255, 0);\n"
"}")
        self.ecran_voice.setObjectName("ecran_voice")
        self.ecran_spectrum = PlotWidget(self.ecran_voice)
        self.ecran_spectrum.hide()
        self.ecran_spectrum.hideAxis('bottom')
        self.ecran_spectrum.hideAxis('left')
        self.ecran_spectrum.enableAutoRange()
        self.ecran_spectrum.setEnabled(False)
        self.ecran_spectrum.setGeometry(QtCore.QRect(0, 0, 280, 78))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ecran_spectrum.sizePolicy().hasHeightForWidth())
        self.ecran_spectrum.setSizePolicy(sizePolicy)
        self.ecran_spectrum.setMinimumSize(QtCore.QSize(280, 0))
        self.ecran_spectrum.setMaximumSize(QtCore.QSize(0, 80))
        self.ecran_spectrum.setStyleSheet("QWidget{\n"
"background-color: rgb(0, 0, 45);\n"
"color: rgb(0, 255, 0);\n"
"}")
        self.ecran_spectrum.setObjectName("ecran_spectrum")
        self.horizontalLayout_6.addWidget(self.ecran_voice)
        self.verticalLayout.addWidget(self.frame_2)
        self.bottom = QtWidgets.QFrame(AddUser)
        self.bottom.setMinimumSize(QtCore.QSize(0, 40))
        self.bottom.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"}")
        self.bottom.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bottom.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bottom.setObjectName("bottom")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.bottom)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame_3 = QtWidgets.QFrame(self.bottom)
        self.frame_3.setMinimumSize(QtCore.QSize(0, 40))
        self.frame_3.setMaximumSize(QtCore.QSize(16777215, 40))
        self.frame_3.setStyleSheet("QFrame{\n"
"    border:0px;\n"
"}")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(5)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.push_ok = QtWidgets.QPushButton(self.frame_3)
        self.push_ok.clicked.connect(self.start_r)
        self.push_ok.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"    background-color: rgb(81, 81, 81)\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(170, 255, 0);\n"
"    color: rgb(170, 255, 0);\n"
"}\n"
"")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/PngItem_5619978.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.push_ok.setIcon(icon)
        self.push_ok.setObjectName("push_ok")
        self.horizontalLayout_5.addWidget(self.push_ok)
        self.push_off = QtWidgets.QPushButton(self.frame_3)
        self.push_off.clicked.connect(self.stop_r)
        # self.push_off.clicked.connect(self.close)
        self.push_off.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"    background-color: rgb(81,81,81);\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(170, 255, 0);\n"
"    color: rgb(255, 0, 0);\n"
"}\n"
"")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/55394-200.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.push_off.setIcon(icon1)
        self.push_off.setObjectName("push_off")
        self.horizontalLayout_5.addWidget(self.push_off)
        self.horizontalLayout_3.addWidget(self.frame_3)
        self.frame_4 = QtWidgets.QFrame(self.bottom)
        self.frame_4.setEnabled(True)
        self.frame_4.setMinimumSize(QtCore.QSize(0, 40))
        self.frame_4.setStyleSheet("QFrame{\n"
"border:0px;\n"
"}")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.push_exit = QtWidgets.QPushButton(self.frame_4)
        self.push_exit.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(255, 0, 0);\n"
"    color: rgb(255, 0, 0);\n"
"}\n"
"")
        self.push_exit.setDefault(True)
        self.push_exit.setObjectName("push_exit")
        self.horizontalLayout_4.addWidget(self.push_exit)
        self.push_switch = QtWidgets.QPushButton(self.frame_4)
        self.push_switch.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(176, 165, 101);\n"
"    color: rgb(176, 165, 101);\n"
"}\n"
"")
        self.push_switch.setDefault(True)
        self.push_switch.setObjectName("push_switch")
        self.horizontalLayout_4.addWidget(self.push_switch)
        self.push_save = QtWidgets.QPushButton(self.frame_4)
        self.push_save.clicked.connect(self.create_Name)
        self.push_save.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(85, 170, 0);\n"
"    color: rgb(85, 170, 0);\n"
"}")
        self.push_save.setAutoDefault(False)
        self.push_save.setDefault(True)
        self.push_save.setFlat(False)
        self.push_save.setObjectName("push_save")
        self.horizontalLayout_4.addWidget(self.push_save)
        self.horizontalLayout_3.addWidget(self.frame_4)
        self.verticalLayout.addWidget(self.bottom)

        self.retranslateUi(AddUser)
        self.push_exit.clicked.connect(AddUser.close) # type: ignore
        self.push_switch.pressed.connect(self.ecran_spectrum.show) # type: ignore
        self.push_switch.released.connect(self.ecran_spectrum.hide) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(AddUser)

        self.timer = QTimer()
        self.timer.timeout.connect(self.LCDEvent)
        self.s = 0

    def retranslateUi(self, AddUser):
        _translate = QtCore.QCoreApplication.translate
        AddUser.setWindowTitle(_translate("AddUser", "Add user"))
        self.label.setText(_translate("AddUser", "Name :"))
        self.label_2.setText(_translate("AddUser", "ID Number:"))
        self.push_ok.setText(_translate("AddUser", " ON"))
        self.push_off.setText(_translate("AddUser", " OFF"))
        self.push_exit.setText(_translate("AddUser", "Exit"))
        self.push_switch.setText(_translate("AddUser", "-o-"))
        self.push_save.setText(_translate("AddUser", "Save"))



#-------------------------------------------------------------------------
    def create_Name(self, line_name):
        path_ = "BD/"
        path_name = path_+ self.line_name.text().title()

        if not os.path.exists(path_name):
            os.makedirs(path_name)

        id_l = self.line_id.text()
        soundPath = path_name +'/' +id_l+".wav"
        self.saveAudio(soundPath)
        self.train(soundPath)

        self.path_ = path_
        self.line_name.clear()
        self.line_id.clear()
        self.s = 0
        self.lcdNumber.display(self.s)

    def start_r(self):
        self.mic = MicrophoneRecorder()
        self.timer.start(1000)
        self.mic.start_()
        print("\33[92m Lisening... \33[0m")
        self.animation()
  
    def LCDEvent(self):
        self.s += 1
        self.lcdNumber.display(self.s)

    def saveAudio(self,pathSoundSave):
        wf = wave.open(pathSoundSave, 'wb')
        wf.setnchannels(1)
        wf.setsampwidth(self.mic.p.get_sample_size(pyaudio.paInt16))
        wf.setframerate(self.mic.rate)
        wf.writeframes(b''.join(self.mic.frames))
        wf.close()
        self.ecran_voice.clear()
        self.ecran_spectrum.clear()

    def set_plotdata(self, name, data_x, data_y):
        if name in self.traces:
            self.traces[name].setData(data_x, data_y)
        else:
            if name == 'waveform':
                self.traces[name] = self.ecran_voice.plot(pen='c', width=3)
                self.ecran_voice.setYRange(0, 255, padding=0)
                self.ecran_voice.setXRange(0, 2 * self.CHUNK, padding=0.005)
                self.ecran_voice.hideAxis('bottom')
                self.ecran_voice.hideAxis('left')
                self.ecran_voice.enableAutoRange()
                self.ecran_voice.setMouseEnabled(x=False, y=False)
            if name == 'spectrum':
                self.traces[name] = self.ecran_spectrum.plot(pen='m', width=3)
                self.ecran_spectrum.setLogMode(x=True, y=True)
                self.ecran_spectrum.setYRange(-4, 0, padding=0)
                self.ecran_spectrum.setXRange(np.log10(20), np.log10(self.RATE / 2), padding=0.005)

    def update_plot(self):
        try:
            wf_data = self.strm.read(self.CHUNK)
            wf_data = struct.unpack(str(2 * self.CHUNK) + 'B', wf_data)
            wf_data = np.array(wf_data, dtype='b')[::2] + 128
            self.set_plotdata(name='waveform',data_x=self.x, data_y=wf_data)

            sp_data = fft(np.array(wf_data, dtype='int8') - 128)
            sp_data = np.abs(sp_data[0:int(self.CHUNK / 2)]) * 2 / (128 * self.CHUNK)
            self.set_plotdata(name='spectrum', data_x=self.f, data_y=sp_data)
        except OSError as e:
            # print(e)
            pass

    def animation(self):
        # pyaudio stuff
        self.RATE = 44100
        self.CHUNK = 1024*2
        self.FORMAT = pyaudio.paInt16
        self.CH = 1
        self.m = pyaudio.PyAudio()
        self.strm= self.m.open(format=self.FORMAT,
                                  channels=self.CH,
                                  rate=self.RATE,
                                  input=True,
                                  frames_per_buffer=self.CHUNK)
        self.x = np.arange(0, 2 * self.CHUNK, 2)    
        self.f = np.linspace(0, self.RATE / 2, int(self.CHUNK / 2))
        self.traces = dict()
        timer = QtCore.QTimer()
        timer.timeout.connect(self.update_plot)
        timer.start(20)
        self.show()


    def stop_r(self):
        self.mic.close_()
        self.timer.stop()
        print("\33[92m Stopped... \33[0m")
        self.strm.close()
        self.m.terminate()

    def calculate_delta(self, array):
        """Calculate and returns the delta of given feature vector matrix"""

        rows,cols = array.shape
        deltas = np.zeros((rows,20))
        N = 2
        for i in range(rows):
            index = []
            j = 1
            while j <= N:
                if i-j < 0:
                    first =0
                else:
                    first = i-j
                if i+j > rows-1:
                    second = rows-1
                else:
                    second = i+j 
                index.append((second,first))
                j+=1
            deltas[i] = ( array[index[0][0]]-array[index[0][1]] + (2 * (array[index[1][0]]-array[index[1][1]])) ) / 10
        return deltas

    def extract_features(self, audio,rate):
        """extract 20 dim mfcc features from an audio, performs CMS and combines
        delta to make it 40 dim feature vector"""   

        mfcc_feat = mfcc.mfcc(audio,rate, 0.025, 0.01,20,nfft=2058,appendEnergy = True)    
        mfcc_feat = preprocessing.scale(mfcc_feat)
        delta = self.calculate_delta(mfcc_feat)
        combined = np.hstack((mfcc_feat,delta)) 
        return combined

    def train(self, source):
        #path to training data
        sr,audio = read(source)
        features = np.asarray(())
        vector   = self.extract_features(audio,sr)
        if features.size == 0:
            features = vector
        else:
            features = np.vstack((features, vector))
        # when features of 5 files of speaker are concatenated, then do model training
        gmm = GaussianMixture(n_components = 16, max_iter = 200, covariance_type='diag',n_init = 1)
        gmm.fit(features)
        # dumping the trained gaussian model
        nr_name = source.split("/")[-1].split(".wav")[0]
        picklefile = "models/" +nr_name+".gmm"
        pickle.dump(gmm,open( picklefile,'wb'))
        print(' modeling completed for speaker:',picklefile," with data point = ",features.shape)


class MicrophoneRecorder(object):
    def __init__(self, rate=44100, chunksize=1024):
        self.rate = rate
        self.chunksize = chunksize
        self.p = pyaudio.PyAudio()
        self.stream = self.p.open(format=pyaudio.paInt16,
                                  channels=1,
                                  rate=self.rate,
                                  input=True,
                                  frames_per_buffer=self.chunksize,
                                  stream_callback=self.new_frame)
        self.lock = threading.Lock()
        self.stop = False
        self.frames = []
        atexit.register(self.close_)

    def new_frame(self, data, frame_count, time_info, status):
        data = np.fromstring(data, 'int16')
        with self.lock:
            self.frames.append(data)
            if self.stop:
                return None, pyaudio.paComplete
        return None, pyaudio.paContinue
    
    def start_(self):
        self.stream.start_stream()
        
    def close_(self):
        with self.lock:
            self.stop = True
        # self.stream.stop_stream()
        self.stream.close()
        self.p.terminate()
        


# https://www.youtube.com/watch?v=jbKJaHw0yo8

if __name__ == "__main__" :
    app = QtWidgets.QApplication(sys.argv)
    AddUser = QtWidgets.QWidget()
    ui = Ui_AddUser()
    ui.setupUi(AddUser)
    AddUser.show()
    sys.exit(app.exec_())

