# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'search.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
import time
import pyaudio
import sys, os
import threading
import atexit
import wave
import numpy as np
import sklearn.mixture
import struct
import pickle
from scipy.io.wavfile import read
from sklearn.mixture import GaussianMixture
from sklearn import preprocessing
import python_speech_features as mfcc
from scipy.fftpack import fft



class Ui_SearchUser(object):
	def setupUi(self, SearchUser):
		SearchUser.setObjectName("SearchUser")
		SearchUser.resize(400, 250)
		SearchUser.setMinimumSize(QtCore.QSize(400, 250))
		SearchUser.setMaximumSize(QtCore.QSize(400, 250))
		SearchUser.setStyleSheet("QWidget{\n"
"    background-color:   rgb(0, 0, 0);\n"
"}")
		self.verticalLayout = QtWidgets.QVBoxLayout(SearchUser)
		self.verticalLayout.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout.setObjectName("verticalLayout")
		self.top = QtWidgets.QFrame(SearchUser)
		self.top.setMaximumSize(QtCore.QSize(400, 200))
		self.top.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"    border: 0px;\n"
"}")
		self.top.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.top.setFrameShadow(QtWidgets.QFrame.Raised)
		self.top.setObjectName("top")
		self.horizontalLayout = QtWidgets.QHBoxLayout(self.top)
		self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
		self.horizontalLayout.setSpacing(0)
		self.horizontalLayout.setObjectName("horizontalLayout")
		self.top_left = QtWidgets.QFrame(self.top)
		self.top_left.setMaximumSize(QtCore.QSize(100, 250))
		self.top_left.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.top_left.setFrameShadow(QtWidgets.QFrame.Raised)
		self.top_left.setObjectName("top_left")
		self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.top_left)
		self.verticalLayout_4.setObjectName("verticalLayout_4")
		self.on = QtWidgets.QPushButton(self.top_left)
		self.on.clicked.connect(self.start_rec)
		self.on.setMinimumSize(QtCore.QSize(75, 25))
		self.on.setMaximumSize(QtCore.QSize(75, 16777215))
		self.on.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"    background-color: rgb(81, 81, 81);\n"
"    border-radius:  10px;\n"
"}\n"
"QPushButton:hover {\n"
"    \n"
"    border:  1px solid rgb(170, 255, 0);\n"
"    color: rgb(170, 255, 0);\n"
"}\n"
"")
		icon = QtGui.QIcon()
		icon.addPixmap(QtGui.QPixmap("icon/PngItem_5619978.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
		self.on.setIcon(icon)
		self.on.setObjectName("on")
		self.verticalLayout_4.addWidget(self.on)
		self.off = QtWidgets.QPushButton(self.top_left)
		self.off.clicked.connect(self.stop_rec)
		self.off.setMinimumSize(QtCore.QSize(75, 25))
		self.off.setMaximumSize(QtCore.QSize(75, 16777215))
		self.off.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"    background-color: rgb(81,81,81);\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    \n"
"    border:  1px solid rgb(255, 0, 0);\n"
"    color: rgb(255, 0, 0);\n"
"}\n"
"")
		icon1 = QtGui.QIcon()
		icon1.addPixmap(QtGui.QPixmap("icon/55394-200.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
		self.off.setIcon(icon1)
		self.off.setObjectName("off")
		self.verticalLayout_4.addWidget(self.off)
		self.lcdNumber = QtWidgets.QLCDNumber(self.top_left)
		self.lcdNumber.hide()
		self.lcdNumber.setEnabled(False)
		self.lcdNumber.setMinimumSize(QtCore.QSize(60, 30))
		self.lcdNumber.setMaximumSize(QtCore.QSize(60, 30))
		self.lcdNumber.setLayoutDirection(QtCore.Qt.LeftToRight)
		self.lcdNumber.setStyleSheet("QLCDNumber{\n"
"color: rgb(0, 255, 0);\n"
"}")
		self.lcdNumber.setFrameShape(QtWidgets.QFrame.NoFrame)
		self.lcdNumber.setDigitCount(2)
		self.lcdNumber.setObjectName("lcdNumber")
		self.verticalLayout_4.addWidget(self.lcdNumber)
		self.horizontalLayout.addWidget(self.top_left)
		self.top_right = QtWidgets.QFrame(self.top)
		self.top_right.setMinimumSize(QtCore.QSize(350, 0))
		self.top_right.setMaximumSize(QtCore.QSize(300, 250))
		self.top_right.setFrameShape(QtWidgets.QFrame.NoFrame)
		self.top_right.setFrameShadow(QtWidgets.QFrame.Raised)
		self.top_right.setObjectName("top_right")
		self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.top_right)
		self.verticalLayout_3.setContentsMargins(0, 2, 0, 1)
		self.verticalLayout_3.setSpacing(0)
		self.verticalLayout_3.setObjectName("verticalLayout_3")
		self.display = PlotWidget(self.top_right)
		self.display.hideAxis('bottom')
		self.display.hideAxis('left')
		self.display.enableAutoRange()
		self.display.setMouseEnabled(x=False, y=False)
		self.display.setMinimumSize(QtCore.QSize(300, 35))
		self.display.setMaximumSize(QtCore.QSize(300, 200))
		self.display.setStyleSheet("background-color: rgb(0, 0, 0);")
		self.display.setObjectName("display")
		self.verticalLayout_3.addWidget(self.display)
		self.horizontalLayout.addWidget(self.top_right)
		self.verticalLayout.addWidget(self.top)
		self.bottom = QtWidgets.QFrame(SearchUser)
		self.bottom.setMaximumSize(QtCore.QSize(400, 200))
		self.bottom.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.bottom.setFrameShadow(QtWidgets.QFrame.Raised)
		self.bottom.setObjectName("bottom")
		self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.bottom)
		self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout_2.setSpacing(0)
		self.verticalLayout_2.setObjectName("verticalLayout_2")
		self.b_display_info = QtWidgets.QFrame(self.bottom)
		self.b_display_info.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"    border: 0px;\n"
"}")
		self.b_display_info.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.b_display_info.setFrameShadow(QtWidgets.QFrame.Raised)
		self.b_display_info.setObjectName("b_display_info")
		self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.b_display_info)
		self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout_5.setSpacing(5)
		self.verticalLayout_5.setObjectName("verticalLayout_5")
		self.name = QtWidgets.QFrame(self.b_display_info)
		self.name.setMinimumSize(QtCore.QSize(0, 35))
		self.name.setMaximumSize(QtCore.QSize(16777215, 35))
		self.name.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.name.setFrameShadow(QtWidgets.QFrame.Raised)
		self.name.setObjectName("name")
		self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.name)
		self.horizontalLayout_3.setContentsMargins(8, 5, -1, 5)
		self.horizontalLayout_3.setObjectName("horizontalLayout_3")
		self.name_name = QtWidgets.QLabel(self.name)
		self.name_name.setObjectName("name_name")
		self.horizontalLayout_3.addWidget(self.name_name)
		self.name_out = QtWidgets.QLabel(self.name)
		self.name_out.setMinimumSize(QtCore.QSize(300, 25))
		self.name_out.setMaximumSize(QtCore.QSize(300, 25))
		self.name_out.setStyleSheet("QLabel{\n"
"background-color: rgb(0, 0, 0);\n"
"color: rgb(170, 255, 0);\n"
"font: 12pt \"Roboto Slab\";\n"
"}")
		self.name_out.setFrameShadow(QtWidgets.QFrame.Plain)
		self.name_out.setMidLineWidth(0)
		self.name_out.setText("")
		self.name_out.setIndent(10)
		self.name_out.setObjectName("name_out")
		self.horizontalLayout_3.addWidget(self.name_out)
		self.verticalLayout_5.addWidget(self.name)
		self.id_scor = QtWidgets.QFrame(self.b_display_info)
		self.id_scor.setMinimumSize(QtCore.QSize(0, 0))
		self.id_scor.setMaximumSize(QtCore.QSize(16777215, 16777215))
		self.id_scor.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.id_scor.setFrameShadow(QtWidgets.QFrame.Raised)
		self.id_scor.setObjectName("id_scor")
		self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.id_scor)
		self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
		self.horizontalLayout_4.setSpacing(0)
		self.horizontalLayout_4.setObjectName("horizontalLayout_4")
		self.id = QtWidgets.QFrame(self.id_scor)
		self.id.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.id.setFrameShadow(QtWidgets.QFrame.Raised)
		self.id.setObjectName("id")
		self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.id)
		self.horizontalLayout_5.setObjectName("horizontalLayout_5")
		self.id_name = QtWidgets.QLabel(self.id)
		self.id_name.setMaximumSize(QtCore.QSize(110, 16777215))
		self.id_name.setObjectName("id_name")
		self.horizontalLayout_5.addWidget(self.id_name)
		self.id_out = QtWidgets.QLabel(self.id)
		self.id_out.setMinimumSize(QtCore.QSize(100, 25))
		self.id_out.setMaximumSize(QtCore.QSize(100, 25))
		self.id_out.setStyleSheet("QLabel{\n"
"background-color: rgb(0, 0, 0);\n"
"color: rgb(170, 255, 0);\n"
"font: 12pt \"Roboto Slab\";\n"
"}")
		self.id_out.setText("")
		self.id_out.setIndent(10)
		self.id_out.setObjectName("id_out")
		self.horizontalLayout_5.addWidget(self.id_out)
		self.horizontalLayout_4.addWidget(self.id)
		self.scor = QtWidgets.QFrame(self.id_scor)
		self.scor.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.scor.setFrameShadow(QtWidgets.QFrame.Raised)
		self.scor.setObjectName("scor")
		self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.scor)
		self.horizontalLayout_6.setObjectName("horizontalLayout_6")
		self.scor_name = QtWidgets.QLabel(self.scor)
		self.scor_name.setLayoutDirection(QtCore.Qt.LeftToRight)
		self.scor_name.setAlignment(QtCore.Qt.AlignCenter)
		self.scor_name.setObjectName("scor_name")
		self.horizontalLayout_6.addWidget(self.scor_name)
		self.scor_out = QtWidgets.QLabel(self.scor)
		self.scor_out.setMinimumSize(QtCore.QSize(100, 25))
		self.scor_out.setMaximumSize(QtCore.QSize(100, 25))
		self.scor_out.setStyleSheet("QLabel{\n"
"background-color: rgb(0, 0, 0);\n"
"color: rgb(170, 255, 0);\n"
"font: 12pt \"Roboto Slab\";\n"
"}")
		self.scor_out.setText("")
		self.scor_out.setIndent(10)
		self.scor_out.setObjectName("scor_out")
		self.horizontalLayout_6.addWidget(self.scor_out)
		self.horizontalLayout_4.addWidget(self.scor)
		self.verticalLayout_5.addWidget(self.id_scor)
		self.verticalLayout_2.addWidget(self.b_display_info)
		self.b_button = QtWidgets.QFrame(self.bottom)
		self.b_button.setMinimumSize(QtCore.QSize(0, 35))
		self.b_button.setMaximumSize(QtCore.QSize(16777215, 35))
		self.b_button.setStyleSheet("QFrame{\n"
"    background-color:  rgb(56, 58, 86);\n"
"    border: 0px;\n"
"}")
		self.b_button.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.b_button.setFrameShadow(QtWidgets.QFrame.Raised)
		self.b_button.setObjectName("b_button")
		self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.b_button)
		self.horizontalLayout_2.setContentsMargins(8, 0, 8, 0)
		self.horizontalLayout_2.setSpacing(5)
		self.horizontalLayout_2.setObjectName("horizontalLayout_2")
		self.exit = QtWidgets.QPushButton(self.b_button)
		self.exit.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(255, 0, 0);\n"
"    color: rgb(255, 0, 0);\n"
"}\n"
"")
		self.exit.setObjectName("exit")
		self.horizontalLayout_2.addWidget(self.exit)
		self.reset = QtWidgets.QPushButton(self.b_button)
		self.reset.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(176, 165, 101);\n"
"    color: rgb(176, 165, 101);\n"
"}\n"
"")
		self.reset.setObjectName("reset")
		self.horizontalLayout_2.addWidget(self.reset)
		self.search = QtWidgets.QPushButton(self.b_button)
		self.search.clicked.connect(self.search_user)
		self.search.setStyleSheet("QPushButton {\n"
"    color: rgb(28,191,255);\n"
"}\n"
"QPushButton:hover {\n"
"    border:  1px ridge rgb(85, 170, 0);\n"
"    color: rgb(85, 170, 0);\n"
"}")
		self.search.setObjectName("search")
		self.horizontalLayout_2.addWidget(self.search)
		self.verticalLayout_2.addWidget(self.b_button)
		self.verticalLayout.addWidget(self.bottom)

		self.retranslateUi(SearchUser)
		self.exit.clicked.connect(SearchUser.close) # type: ignore
		self.reset.clicked.connect(self.name_out.clear) # type: ignore
		self.reset.clicked.connect(self.id_out.clear) # type: ignore
		self.reset.clicked.connect(self.scor_out.clear) # type: ignore
		self.reset.clicked.connect(self.lcdNumber.hide) # type: ignore
		self.reset.clicked.connect(self.display.clear) # type: ignore

		QtCore.QMetaObject.connectSlotsByName(SearchUser)

		self.timer = QTimer()
		self.timer.timeout.connect(self.LCDEvent)
		self.s = 0


	def retranslateUi(self, SearchUser):
		_translate = QtCore.QCoreApplication.translate
		SearchUser.setWindowTitle(_translate("SearchUser", "Search user"))
		self.on.setText(_translate("SearchUser", " ON"))
		self.off.setText(_translate("SearchUser", " OFF"))
		self.name_name.setText(_translate("SearchUser", "Name:"))
		self.id_name.setText(_translate("SearchUser", "ID:"))
		self.scor_name.setText(_translate("SearchUser", "Scor:"))
		self.exit.setText(_translate("SearchUser", "Exit"))
		self.reset.setText(_translate("SearchUser", "Reset"))
		self.search.setText(_translate("SearchUser", "Search"))



	def search_user(self, bd_name):
		voice = "voice/voice.wav"

		if not os.path.exists(voice):
			self.output_view("Empty","Empty","Empty");

		self.bd_name = []
		data_path = "BD/"
		
		for path, subdirname, filenames in os.walk(data_path):
			for id_name in filenames:
				nr_name = path+'/'+id_name
				self.bd_name.append(nr_name)
				# self.train(nr_name)
		self.compare(voice)
	
	def start_rec(self):
		self.mic = MicrophoneRecorder()
		self.timer.start(1000)
		self.lcdNumber.show()
		self.mic.start_()
		print("\33[92m Lisening... \33[0m")
		self.animation()

	def LCDEvent(self):
		self.s += 1
		self.lcdNumber.display(self.s)
		# print(self.s)

	def output_view(self, name, id_name, scor):
		self.name_out.setText(name)
		self.id_out.setText(id_name)
		self.scor_out.setText(scor)

	def calculate_delta(self, array):
		"""Calculate and returns the delta of given feature vector matrix"""

		rows,cols = array.shape
		deltas = np.zeros((rows,20))
		N = 2
		for i in range(rows):
			index = []
			j = 1
			while j <= N:
				if i-j < 0:
					first =0
				else:
					first = i-j
				if i+j > rows-1:
					second = rows-1
				else:
					second = i+j 
				index.append((second,first))
				j+=1
			deltas[i] = ( array[index[0][0]]-array[index[0][1]] + 
				(2 * (array[index[1][0]]-array[index[1][1]])) ) / 10
		return deltas

	def extract_features(self, audio,rate):
		"""extract 20 dim mfcc features from an audio, performs CMS and combines
		delta to make it 40 dim feature vector"""   

		mfcc_feat = mfcc.mfcc(audio,rate, 0.025, 0.01,20,nfft=2058,appendEnergy = True)    
		mfcc_feat = preprocessing.scale(mfcc_feat)
		delta = self.calculate_delta(mfcc_feat)
		combined = np.hstack((mfcc_feat,delta)) 
		return combined

	def train(self, source):
		#path to training data
		sr,audio = read(source)
		features = np.asarray(())
		vector   = self.extract_features(audio,sr)
		if features.size == 0:
			features = vector
		else:
			features = np.vstack((features, vector))
		# when features of 5 files of speaker are concatenated, then do model training
		gmm = GaussianMixture(n_components = 16, max_iter = 200, covariance_type='diag',n_init = 1)
		gmm.fit(features)
		# dumping the trained gaussian model
		nr_name = source.split("/")[-1].split(".wav")[0]
		picklefile = "models/" +nr_name+".gmm"
		pickle.dump(gmm,open( picklefile,'wb'))
		print(' modeling completed for speaker:',picklefile," with data point = ",features.shape)

	def compare(self, voice, threshold= -28):
		modelpath = "models/"
		gmm_files = [os.path.join(modelpath,fname) for fname in 
				  os.listdir(modelpath) if fname.endswith('.gmm')]
		  
		sr, audio = read(voice)
		#Load the Gaussian gender Models
		models = [pickle.load(open(fname,'rb')) for fname in gmm_files]
		speakers = [fname.split("/")[-1].split(".gmm")[0] for fname in gmm_files]
		vector = self.extract_features(audio,sr)
		log_likelihood = np.zeros(len(models)) 
		for i in range(len(models)):
			gmm    = models[i]  #checking with each model one by one
			scores = np.array(gmm.score(vector))
			log_likelihood[i] = scores.sum()
			# print(speakers[i],log_likelihood[i])
		winner = np.argmax(log_likelihood)
		

		if (log_likelihood[winner] > threshold ):
			# print(f"\tBest match --> {speakers[winner]}")
			for ni in self.bd_name:
				n = ni.split("/")[-2]
				i = ni.split("/")[-1].split(".wav")[0]

				if speakers[winner] == i:
					self.output_view(str(n), str(speakers[winner]), str(log_likelihood[winner]))
					# self.bd_name.clear()
		else:
			self.output_view("Not Found","Not Found","Not Found")

	def set_plotdata(self, name, data_x, data_y):
		if name in self.traces:
			self.traces[name].setData(data_x, data_y)
		else:
			if name == 'waveform':
				self.traces[name] = self.display.plot(pen='c', width=3)
				self.display.setYRange(0, 255, padding=0)
				self.display.setXRange(0, 2 * self.CHUNK, padding=0.005)
				self.display.hideAxis('bottom')
				self.display.hideAxis('left')
				self.display.enableAutoRange()
				self.display.setMouseEnabled(x=False, y=False)

	def update_plot(self):
		try:
			wf_data = self.st.read(self.CHUNK)
			wf_data = struct.unpack(str(2 * self.CHUNK) + 'B', wf_data)
			wf_data = np.array(wf_data, dtype='b')[::2] + 128
			self.set_plotdata(name='waveform',data_x=self.x, data_y=wf_data)
		except OSError as e:
			# print(e)
			pass

	def animation(self):
		# pyaudio stuff
		self.RATE = 44100
		self.CHUNK = 1024*2
		self.FORMAT = pyaudio.paInt16
		self.CH = 1
		self.z = pyaudio.PyAudio()
		self.st= self.z.open(format=self.FORMAT,
								  channels=self.CH,
								  rate=self.RATE,
								  input=True,
								  frames_per_buffer=self.CHUNK)
		self.x = np.arange(0, 2 * self.CHUNK, 2)
		self.traces = dict()
		timer = QtCore.QTimer()
		timer.timeout.connect(self.update_plot)
		timer.start(20)
		self.start()


	def stop_rec(self):
		self.mic.close_()
		self.timer.stop()
		self.s = 0
		print("\33[92m Stopped... \33[0m")
		self.st.close()
		self.z.terminate()

class MicrophoneRecorder(object):
	def __init__(self, rate=44100, chunksize=1024):
		self.rate = rate
		self.chunksize = chunksize
		self.p = pyaudio.PyAudio()
		self.stream = self.p.open(format=pyaudio.paInt16,
								  channels=1,
								  rate=self.rate,
								  input=True,
								  frames_per_buffer=self.chunksize,
								  stream_callback=self.new_frame)
		self.lock = threading.Lock()
		self.stop = False
		self.frames = []
		atexit.register(self.close_)

	def new_frame(self, data, frame_count, time_info, status):
		data = np.frombuffer(data, 'int16')
		with self.lock:
			self.frames.append(data)
			if self.stop:
				return None, pyaudio.paComplete
		return None, pyaudio.paContinue
	
	
	def start_(self):
		self.stream.start_stream()

	def close_(self):
		with self.lock:
			self.stop = True
		self.stream.close()
		self.p.terminate()

		pathSoundSave = "voice/"
		if not os.path.exists(pathSoundSave):
			os.makedirs(pathSoundSave)
		pathSoundSave = pathSoundSave + "voice.wav"
		wf = wave.open(pathSoundSave, 'wb')
		wf.setnchannels(1)
		wf.setsampwidth(self.p.get_sample_size(pyaudio.paInt16))
		wf.setframerate(self.rate)
		wf.writeframes(b''.join(self.frames))
		wf.close()

from pyqtgraph import PlotWidget
if __name__ == "__main__":
	app = QtWidgets.QApplication(sys.argv)
	SearchUser = QtWidgets.QWidget()
	ui = Ui_SearchUser()
	ui.setupUi(SearchUser)
	SearchUser.show()
	sys.exit(app.exec_())
